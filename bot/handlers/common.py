import os
import json
import random
from datetime import timedelta
from django.utils import timezone
from bot import bot
from django.conf import settings
from telebot.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)
from bot.models import Player, GameClass, PlayerClass, Activity, ActivityParticipant
from bot.keyboards import PROFILE_BUTTONS
from .registration import start_registration
from functools import wraps
from telebot.apihelper import ApiTelegramException
from telebot import TeleBot

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id: [message_id, ...])
user_last_messages = {}

# –ü–æ–ª—É—á–∞–µ–º id –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
BOT_ID = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ id —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_active_activity_message = {}

def get_bot_id():
    global BOT_ID
    if BOT_ID is None:
        BOT_ID = bot.get_me().id
    return BOT_ID

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_previous_messages(user_id, exclude_message_id=None):
    ids = user_last_messages.get(user_id, [])
    for mid in ids:
        if exclude_message_id and mid == exclude_message_id:
            continue
        try:
            bot.delete_message(chat_id=user_id, message_id=mid)
        except ApiTelegramException as e:
            if 'message to delete not found' in str(e):
                continue
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    user_last_messages[user_id] = []

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def remember_message(user_id, message_id):
    if user_id not in user_last_messages:
        user_last_messages[user_id] = []
    user_last_messages[user_id].append(message_id)

def start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    fake_call = type('FakeCall', (), {'from_user': message.from_user, 'message': message})
    profile(fake_call)


def only_our_player(func):
    @wraps(func)
    def wrapper(call, *args, **kwargs):
        user_id = str(call.from_user.id)
        try:
            player = Player.objects.get(telegram_id=user_id)
            if not player.is_our_player:
                bot.send_message(user_id, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –∏–≥—Ä–æ–∫–æ–º.')
                return
        except Player.DoesNotExist:
            bot.send_message(user_id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.')
            return
        return func(call, *args, **kwargs)
    return wrapper


@only_our_player
def profile(call: CallbackQuery):
    user_id = str(call.from_user.id)
    try:
        player = Player.objects.get(telegram_id=user_id)
        # –ü—Ä–æ—Ñ–∏–ª—å
        user_info = (
            f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n"
            f"–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º: {player.game_nickname}\n"
            f"Telegram: @{player.tg_name}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if player.is_admin else '–ò–≥—Ä–æ–∫'}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {player.created_at.strftime('%d.%m.%Y')}\n\n"
        )
        player_classes = player.get_available_classes()
        if player_classes:
            user_info += "*–í–∞—à–∏ –∫–ª–∞—Å—Å—ã:*\n"
            for class_info in player_classes:
                user_info += (
                    f"‚Ä¢ {class_info['class_name']} (–£—Ä–æ–≤–µ–Ω—å {class_info['level']})\n"
                )
        else:
            user_info += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤\n"
        selected_class = player.get_selected_class()
        if selected_class:
            user_info += f"\n*–¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:*\n"
            user_info += (
                f"‚Ä¢ {selected_class['class_name']} (–£—Ä–æ–≤–µ–Ω—å {selected_class['level']})\n"
            )
        msg = bot.send_message(
            chat_id=user_id,
            text=user_info,
            parse_mode='Markdown',
            reply_markup=PROFILE_BUTTONS
        )
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∞–∫—Ç–∏–≤–Ω–∞—è –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —É—á–∞—Å—Ç–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        participations = ActivityParticipant.objects.filter(player=player).select_related('activity', 'player_class').order_by('-joined_at')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —É—á–∞—Å—Ç–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        for part in participations:
            activity = part.activity
            
            if not part.completed_at:
                # –ê–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ
                duration = timezone.now() - part.joined_at
                hours = int(duration.total_seconds() // 3600)
                minutes = int((duration.total_seconds() % 3600) // 60)
                seconds = int((duration.total_seconds() % 60))
                text = (
                    f"üü¢ *–ê–∫—Ç–∏–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*\n"
                    f"{activity.name}\n"
                    f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–ö–ª–∞—Å—Å: {part.player_class.game_class.name} (–£—Ä–æ–≤–µ–Ω—å {part.player_class.level})\n"
                    f"–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è: {hours}—á {minutes}–º {seconds}—Å\n"
                    f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—á–∞—Å—Ç–∏—è: {part.joined_at.strftime('%d.%m.%Y %H:%M')}\n"
                )
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"leave_activity_{activity.id}_{part.player_class.id}"))
                msg = bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
            else:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ
                duration = part.completed_at - part.joined_at
                hours = int(duration.total_seconds() // 3600)
                minutes = int((duration.total_seconds() % 3600) // 60)
                seconds = int((duration.total_seconds() % 60))
                text = (
                    f"üî¥ *–£—á–∞—Å—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n\n"
                    f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity.name}\n"
                    f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–ö–ª–∞—Å—Å: {part.player_class.game_class.name} (–£—Ä–æ–≤–µ–Ω—å {part.player_class.level})\n"
                    f"–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è: {hours}—á {minutes}–º {seconds}—Å\n"
                    f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: {part.total_points}\n\n"
                    f"üìä *–î–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–∏—è:*\n"
                    f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {part.joined_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {part.completed_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å\n"
                    f"‚Ä¢ –ë–∞–ª–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ: {part.points_earned}\n"
                    f"‚Ä¢ –î–æ–ø. –±–∞–ª–ª—ã: {part.additional_points}\n"
                    f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã: {part.total_points}"
                )
                
                # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ
                if activity.is_active:
                    text += f"\n\nüîÑ *–•–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?*"
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton("üü¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"join_activity_{activity.id}"))
                    msg = bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode='Markdown',
                        reply_markup=keyboard
                    )
                else:
                    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                    text += f"\n\nüî¥ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*"
                    msg = bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode='Markdown'
                    )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        for activity in Activity.objects.filter(is_active=True):
            text = (
                f"‚ö™ *–î–æ—Å—Ç—É–ø–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*\n"
                f"{activity.name}\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è: {player.player_classes.count()}"
            )
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üü¢ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"join_activity_{activity.id}"))
            msg = bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
    except Exception as e:
        # –û—à–∏–±–∫–∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        pass

def show_classes(call: CallbackQuery, page: int = 1):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å —É –∏–≥—Ä–æ–∫–∞)"""
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    try:
        player = Player.objects.get(telegram_id=user_id)
        player_classes = player.player_classes.select_related('game_class').all()
        classes_per_page = 4
        total_classes = player_classes.count()
        total_pages = (total_classes + classes_per_page - 1) // classes_per_page
        start_idx = (page - 1) * classes_per_page
        end_idx = start_idx + classes_per_page
        current_page_classes = player_classes[start_idx:end_idx]
        keyboard = InlineKeyboardMarkup(row_width=2)
        for pc in current_page_classes:
            keyboard.add(
                InlineKeyboardButton(
                    text=pc.game_class.name,
                    callback_data=f"select_class_{pc.game_class.id}"
                )
            )
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                    callback_data=f"classes_page_{page-1}"
                )
            )
        nav_buttons.append(
            InlineKeyboardButton(text="üîΩ–ü—Ä–æ—Ñ–∏–ª—åüîΩ", callback_data="profile")
        )
        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
                    callback_data=f"classes_page_{page+1}"
                )
            )
        keyboard.row(*nav_buttons)
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):"
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=text,
            reply_markup=keyboard
        )
    except Player.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except Exception as e:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤: {str(e)}")

def handle_classes_pagination(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        page = int(call.data.split('_')[2])
        show_classes(call, page)
    except Exception as e:
        bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤: {str(e)}")


def changeLvlClassMarkup(call: CallbackQuery, page: int = 1):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    try:
        player = Player.objects.get(telegram_id=user_id)
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ PlayerClass –∏–≥—Ä–æ–∫–∞
        player_classes = player.player_classes.select_related('game_class').all()
        classes_per_page = 4
        total_classes = player_classes.count()
        total_pages = (total_classes + classes_per_page - 1) // classes_per_page
        start_idx = (page - 1) * classes_per_page
        end_idx = start_idx + classes_per_page
        current_page_classes = player_classes[start_idx:end_idx]
        keyboard = InlineKeyboardMarkup(row_width=2)
        for pc in current_page_classes:
            keyboard.add(
                InlineKeyboardButton(
                    text=pc.game_class.name,
                    callback_data=f"change_lvl_{pc.game_class.id}"
                )
            )
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                    callback_data=f"change_page_lvl_{page-1}"
                )
            )
        nav_buttons.append(
            InlineKeyboardButton(text="üîΩ–ü—Ä–æ—Ñ–∏–ª—åüîΩ", callback_data="profile")
        )
        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
                    callback_data=f"change_page_lvl_{page+1}"
                )
            )
        keyboard.row(*nav_buttons)
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):"
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=text,
            reply_markup=keyboard
        )
    except Player.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except Exception as e:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤: {str(e)}")

def handle_change_level_pagination(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        page = int(call.data.split('_')[3])
        changeLvlClassMarkup(call, page)
    except Exception as e:
        bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤: {str(e)}")

def handle_change_level(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–∑ callback_data
        class_id = int(call.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–≥—Ä–æ–∫–∞
        player = Player.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
        game_class = GameClass.objects.get(id=class_id)
        player_class = PlayerClass.objects.get(player=player, game_class=game_class)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_level_change"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–ª–∞—Å—Å–∞ {game_class.name}: {player_class.level}\n"
                 f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∞—Å—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        bot.register_next_step_handler(call.message, process_new_level, class_id)
        
    except Player.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except GameClass.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
    except Exception as e:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∞—Å—Å–∞."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∞—Å—Å–∞: {str(e)}")

def process_new_level(message: Message, class_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    user_id = str(message.from_user.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        try:
            new_level = int(message.text)
            if new_level < 1:
                raise ValueError("–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        except ValueError:
            bot.send_message(
                chat_id=user_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
                )
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–≥—Ä–æ–∫–∞
        player = Player.objects.get(telegram_id=str(message.from_user.id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞
        game_class = GameClass.objects.get(id=class_id)
        player_class = PlayerClass.objects.get(player=player, game_class=game_class)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        player_class.level = new_level
        player_class.save()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        bot.send_message(
            chat_id=user_id,
            text=f"–£—Ä–æ–≤–µ–Ω—å –∫–ª–∞—Å—Å–∞ {game_class.name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_level}",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
            )
        )
        
    except Player.DoesNotExist:
        bot.send_message(
            chat_id=user_id,
            text="–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except GameClass.DoesNotExist:
        bot.send_message(
            chat_id=user_id,
            text="–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
    except Exception as e:
        bot.send_message(
            chat_id=user_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∫–ª–∞—Å—Å–∞."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –∫–ª–∞—Å—Å–∞: {str(e)}")

def cancel_level_change(call: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–ª–∞—Å—Å–∞"""
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        bot.clear_step_handler(call.message)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞
        player = Player.objects.get(telegram_id=user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
        user_info = (
            f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n"
            f"–ò–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º: {player.game_nickname}\n"
            f"Telegram: @{player.tg_name}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if player.is_admin else '–ò–≥—Ä–æ–∫'}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {player.created_at.strftime('%d.%m.%Y')}\n\n"
        )
        player_classes = player.get_available_classes()
        if player_classes:
            user_info += "*–í–∞—à–∏ –∫–ª–∞—Å—Å—ã:*\n"
            for class_info in player_classes:
                user_info += (
                    f"‚Ä¢ {class_info['class_name']} (–£—Ä–æ–≤–µ–Ω—å {class_info['level']})\n"
                )
        else:
            user_info += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤\n"
        selected_class = player.get_selected_class()
        if selected_class:
            user_info += f"\n*–¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:*\n"
            user_info += (
                f"‚Ä¢ {selected_class['class_name']} (–£—Ä–æ–≤–µ–Ω—å {selected_class['level']})\n"
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=user_info,
            parse_mode='Markdown',
            reply_markup=PROFILE_BUTTONS
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
        participations = ActivityParticipant.objects.filter(player=player).select_related('activity', 'player_class').order_by('-joined_at')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —É—á–∞—Å—Ç–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        for part in participations:
            activity = part.activity
            
            if not part.completed_at:
                # –ê–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ
                duration = timezone.now() - part.joined_at
                hours = int(duration.total_seconds() // 3600)
                minutes = int((duration.total_seconds() % 3600) // 60)
                seconds = int((duration.total_seconds() % 60))
                text = (
                    f"üü¢ *–ê–∫—Ç–∏–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*\n"
                    f"{activity.name}\n"
                    f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–ö–ª–∞—Å—Å: {part.player_class.game_class.name} (–£—Ä–æ–≤–µ–Ω—å {part.player_class.level})\n"
                    f"–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è: {hours}—á {minutes}–º {seconds}—Å\n"
                    f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—á–∞—Å—Ç–∏—è: {part.joined_at.strftime('%d.%m.%Y %H:%M')}\n"
                )
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton("üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"leave_activity_{activity.id}_{part.player_class.id}"))
                msg = bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
            else:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ
                duration = part.completed_at - part.joined_at
                hours = int(duration.total_seconds() // 3600)
                minutes = int((duration.total_seconds() % 3600) // 60)
                seconds = int((duration.total_seconds() % 60))
                text = (
                    f"üî¥ *–£—á–∞—Å—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n\n"
                    f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity.name}\n"
                    f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–ö–ª–∞—Å—Å: {part.player_class.game_class.name} (–£—Ä–æ–≤–µ–Ω—å {part.player_class.level})\n"
                    f"–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è: {hours}—á {minutes}–º {seconds}—Å\n"
                    f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: {part.total_points}\n\n"
                    f"üìä *–î–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–∏—è:*\n"
                    f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {part.joined_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {part.completed_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å\n"
                    f"‚Ä¢ –ë–∞–ª–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ: {part.points_earned}\n"
                    f"‚Ä¢ –î–æ–ø. –±–∞–ª–ª—ã: {part.additional_points}\n"
                    f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã: {part.total_points}"
                )
                
                # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—á–∞—Å—Ç–∏–µ
                if activity.is_active:
                    text += f"\n\nüîÑ *–•–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?*"
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(InlineKeyboardButton("üü¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"join_activity_{activity.id}"))
                    msg = bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode='Markdown',
                        reply_markup=keyboard
                    )
                else:
                    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                    text += f"\n\nüî¥ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*"
                    msg = bot.send_message(
                        chat_id=user_id,
                        text=text,
                        parse_mode='Markdown'
                    )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
        for activity in Activity.objects.filter(is_active=True):
            text = (
                f"‚ö™ *–î–æ—Å—Ç—É–ø–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å*\n"
                f"{activity.name}\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è: {player.player_classes.count()}"
            )
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üü¢ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"join_activity_{activity.id}"))
            msg = bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        
    except Player.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except Exception as e:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è: {str(e)}")


def handle_join_activity(call: CallbackQuery, page: int = 1):
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ callback_data
        activity_id = int(call.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–≥—Ä–æ–∫–∞
        player = Player.objects.get(telegram_id=str(call.from_user.id))
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity = Activity.objects.get(id=activity_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if not activity.is_active:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="–≠—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–≥—Ä–æ–∫–∞ (—Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã)
        available_player_classes = player.player_classes.all()
        
        if not available_player_classes.exists():
            bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è."
            )
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        player_classes = []
        for pc in available_player_classes:
            player_classes.append({
                'class_name': pc.game_class.name,
                'level': pc.level,
                'player_class_id': pc.id
            })
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        classes_per_page = 4
        total_classes = len(player_classes)
        total_pages = (total_classes + classes_per_page - 1) // classes_per_page
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = (page - 1) * classes_per_page
        end_idx = start_idx + classes_per_page
        current_page_classes = player_classes[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∞—Å—Å–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∞—Å—Å–æ–≤
        for class_info in current_page_classes:
            keyboard.add(
                InlineKeyboardButton(
                    text=f"{class_info['class_name']} (–£—Ä–æ–≤–µ–Ω—å {class_info['level']})",
                    callback_data=f"select_activity_class_{activity_id}_{class_info['player_class_id']}"
                )
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                    callback_data=f"activity_classes_page_{activity_id}_{page-1}"
                )
            )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        nav_buttons.append(
            InlineKeyboardButton(text="üîΩ–û—Ç–º–µ–Ω–∞üîΩ", callback_data=f"cancel_activity_{activity_id}")
        )
        
        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
                    callback_data=f"activity_classes_page_{activity_id}_{page+1}"
                )
            )
        
        keyboard.row(*nav_buttons)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ '{activity.name}' (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):"
        
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=text,
            reply_markup=keyboard
        )
        
    except Player.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except Activity.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
    except Exception as e:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")

def handle_activity_classes_pagination(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = call.data.split('_')
        activity_id = int(parts[3])  # activity_classes_page_{activity_id}_{page}
        page = int(parts[4])
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback_data –¥–ª—è handle_join_activity
        call.data = f"join_activity_{activity_id}"
        
        # –í—ã–∑—ã–≤–∞–µ–º handle_join_activity —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        handle_join_activity(call, page)
    except Exception as e:
        bot.edit_message_text(
            chat_id=call.from_user.id,
            message_id=call.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")

def cancel_activity_join(call: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ callback_data
        activity_id = int(call.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        activity = Activity.objects.get(id=activity_id)
        
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ '{activity.name}'"
        )
        
    except Exception as e:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")


def complete_activity(call: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —É—á–∞—Å—Ç–∏—è –∏–∑ callback_data
        participation_id = int(call.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–∏–µ
        participation = ActivityParticipant.objects.get(id=participation_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—á–∞—Å—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        player = Player.objects.get(telegram_id=str(call.from_user.id))
        if participation.player.game_nickname != player.game_nickname:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="–û—à–∏–±–∫–∞: —ç—Ç–æ –Ω–µ –≤–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
            )
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—á–∞—Å—Ç–∏–µ
        participation.completed_at = timezone.now()
        participation.save()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã
        points = participation.calculate_points()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        duration = participation.completed_at - participation.joined_at
        hours = int(duration.total_seconds() // 3600)
        minutes = int((duration.total_seconds() % 3600) // 60)
        seconds = int(duration.total_seconds() % 60)
        
        text = (
            f"üî¥ *–£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {participation.activity.name}\n"
            f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {participation.activity.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"–ö–ª–∞—Å—Å: {participation.player_class.game_class.name} (–£—Ä–æ–≤–µ–Ω—å {participation.player_class.level})\n"
            f"–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è: {hours}—á {minutes}–º {seconds}—Å\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: {participation.total_points}\n\n"
            f"üìä *–î–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–∏—è:*\n"
            f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {participation.joined_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {participation.completed_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å\n"
            f"‚Ä¢ –ë–∞–ª–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ: {participation.points_earned}\n"
            f"‚Ä¢ –î–æ–ø. –±–∞–ª–ª—ã: {participation.additional_points}\n"
            f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã: {participation.total_points}"
        )
        
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=text,
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        player.remove_activity_message(participation.activity.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        player.add_completion_message(participation.activity.id, message_id)
        
    except ActivityParticipant.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
    except Exception as e:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")

def handle_select_activity_class(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        parts = call.data.split('_')
        activity_id = int(parts[3])
        player_class_id = int(parts[4])
        player = Player.objects.get(telegram_id=str(call.from_user.id))
        activity = Activity.objects.get(id=activity_id)
        if not activity.is_active:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="–≠—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞."
            )
            return
        player_class = PlayerClass.objects.get(id=player_class_id, player=player)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —É—á–∞—Å—Ç–∏–µ —ç—Ç–∏–º –∫–ª–∞—Å—Å–æ–º –≤ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ª—é–±–æ–µ, –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–µ –∏–ª–∏ –Ω–µ—Ç) ‚Äî –Ω–µ –¥–∞—ë–º —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        if ActivityParticipant.objects.filter(activity=activity, player=player, player_class=player_class).exists():
            bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ —ç—Ç–∏–º –∫–ª–∞—Å—Å–æ–º –≤ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
            )
            return
        participation = ActivityParticipant.objects.create(
            activity=activity,
            player=player,
            player_class=player_class
        )
        text = (
            f"üü¢ *–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!*\n\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity.name}\n"
            f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"–ö–ª–∞—Å—Å: {player_class.game_class.name} (–£—Ä–æ–≤–µ–Ω—å {player_class.level})\n"
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—á–∞—Å—Ç–∏—è: {participation.joined_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
        )
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"leave_activity_{activity.id}_{player_class.id}"))
        msg = bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=text,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
        player.add_activity_message(activity.id, msg.message_id)
    except Player.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except PlayerClass.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )
    except Exception as e:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")

# --- –ö–ù–û–ü–ö–ê "–ü–†–ò–ù–Ø–¢–¨ –£–ß–ê–°–¢–ò–ï –î–†–£–ì–ò–ú –ö–õ–ê–°–°–û–ú" –∏ –º–µ–Ω—é –∫–ª–∞—Å—Å–æ–≤ ---
def show_active_activity_message(user_id):
    try:
        player = Player.objects.get(telegram_id=str(user_id))
        activity = Activity.objects.filter(is_active=True).order_by('-created_at').first()
        if not activity:
            if user_id in user_active_activity_message:
                try:
                    bot.delete_message(chat_id=user_id, message_id=user_active_activity_message[user_id])
                except Exception:
                    pass
                user_active_activity_message.pop(user_id, None)
            return
        existing_message_id = player.get_activity_message_id(activity.id)
        if existing_message_id:
            return
        participation = ActivityParticipant.objects.filter(activity=activity, player=player, completed_at__isnull=True).select_related('player_class').first()
        text = (
            f"üü¢ *–ê–∫—Ç–∏–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!*\n\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity.name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {activity.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {activity.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        keyboard = InlineKeyboardMarkup()
        if participation:
            player_class = participation.player_class
            duration = timezone.now() - participation.joined_at
            hours = int(duration.total_seconds() // 3600)
            minutes = int((duration.total_seconds() % 3600) // 60)
            seconds = int((duration.total_seconds() % 60))
            text += (
                f"–ö–ª–∞—Å—Å: {player_class.game_class.name} (–£—Ä–æ–≤–µ–Ω—å {player_class.level})\n"
                f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è: {hours}—á {minutes}–º {seconds}—Å\n"
                f"\n‚úÖ‚úÖ‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n"
            )
            keyboard.add(InlineKeyboardButton("üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"leave_activity_{activity.id}_{player_class.id}"))
            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –¥—Ä—É–≥–∏–º –∫–ª–∞—Å—Å–æ–º" –≤—Å–µ–≥–¥–∞
            keyboard.add(InlineKeyboardButton("üü¢ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –¥—Ä—É–≥–∏–º –∫–ª–∞—Å—Å–æ–º", callback_data=f"join_activity_{activity.id}"))
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, –≤–µ–¥—É—â—É—é –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∞
            keyboard.add(InlineKeyboardButton("üü¢ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data=f"join_activity_{activity.id}"))
        msg = bot.send_message(
            chat_id=user_id,
            text=text,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
        player.add_activity_message(activity.id, msg.message_id)
        user_active_activity_message[user_id] = msg.message_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

# --- –ò—Å–ø—Ä–∞–≤–∏—Ç—å handle_join_activity: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é –∫–ª–∞—Å—Å–æ–≤ ---
def handle_join_activity(call: CallbackQuery, page: int = 1):
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    try:
        activity_id = int(call.data.split('_')[2])
        player = Player.objects.get(telegram_id=user_id)
        activity = Activity.objects.get(id=activity_id)
        if not activity.is_active:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="–≠—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞."
            )
            return
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PlayerClass –∏–≥—Ä–æ–∫–∞
        all_player_classes = list(player.player_classes.select_related('game_class').all())
        # –ü–æ–ª—É—á–∞–µ–º id –∫–ª–∞—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        used_class_ids = set(
            ActivityParticipant.objects.filter(activity=activity, player=player)
            .values_list('player_class_id', flat=True)
        )
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª
        available_player_classes = [pc for pc in all_player_classes if pc.id not in used_class_ids]
        if not available_player_classes:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
            )
            return
        classes_per_page = 4
        total_classes = len(available_player_classes)
        total_pages = (total_classes + classes_per_page - 1) // classes_per_page
        start_idx = (page - 1) * classes_per_page
        end_idx = start_idx + classes_per_page
        current_page_classes = available_player_classes[start_idx:end_idx]
        keyboard = InlineKeyboardMarkup(row_width=2)
        for pc in current_page_classes:
            keyboard.add(
                InlineKeyboardButton(
                    text=f"{pc.game_class.name} (–£—Ä–æ–≤–µ–Ω—å {pc.level})",
                    callback_data=f"select_activity_class_{activity_id}_{pc.id}"
                )
            )
        nav_buttons = []
        if page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                    callback_data=f"activity_classes_page_{activity_id}_{page-1}"
                )
            )
        nav_buttons.append(
            InlineKeyboardButton(text="üîΩ–û—Ç–º–µ–Ω–∞üîΩ", callback_data=f"cancel_activity_{activity_id}")
        )
        if page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
                    callback_data=f"activity_classes_page_{activity_id}_{page+1}"
                )
            )
        keyboard.row(*nav_buttons)
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ '{activity.name}' (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}):"
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=text,
            reply_markup=keyboard
        )
    except Player.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    except Activity.DoesNotExist:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
    except Exception as e:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        )
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ"
def handle_leave_activity_button(call):
    user_id = str(call.from_user.id)
    message_id = call.message.message_id
    from bot.models import Player, Activity, ActivityParticipant
    try:
        player = Player.objects.get(telegram_id=user_id)
        parts = call.data.split('_')
        activity_id = int(parts[2])
        player_class_id = int(parts[3])
        activity = Activity.objects.get(id=activity_id)
        participation = ActivityParticipant.objects.filter(
            activity=activity, 
            player=player, 
            player_class_id=player_class_id,
            completed_at__isnull=True
        ).first()
        if not participation:
            profile(call)
            return
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—á–∞—Å—Ç–∏–µ
        participation.completed_at = timezone.now()
        participation.save()
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        old_message_id = player.get_activity_message_id(activity.id)
        if old_message_id:
            try:
                bot.delete_message(chat_id=user_id, message_id=old_message_id)
            except Exception:
                pass
            player.remove_activity_message(activity.id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –∫–ª–∞—Å—Å—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è
        all_player_classes = list(player.player_classes.select_related('game_class').all())
        used_class_ids = set(
            ActivityParticipant.objects.filter(activity=activity, player=player)
            .values_list('player_class_id', flat=True)
        )
        available_player_classes = [pc for pc in all_player_classes if pc.id not in used_class_ids]
        if not available_player_classes:
            from bot.handlers.common import send_full_participation_stats
            send_full_participation_stats(player, activity)
            player.add_completion_message(activity.id, message_id)
            return
        from bot.handlers.common import send_participation_stats
        send_participation_stats(player, participation)
        player.add_completion_message(activity.id, message_id)
    except Exception as e:
        profile(call)

# --- –î–û–ë–ê–í–õ–Ø–ï–ú –í–´–ó–û–í –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–†–ò –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò ---
def send_participation_stats(player, participation, with_delete_button=False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–∏—è –∏–≥—Ä–æ–∫—É. –ö–Ω–æ–ø–∫–∞ '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' –±–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è.
    """
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã
    if participation.completed_at:
        participation.calculate_points()
    duration = participation.completed_at - participation.joined_at
    hours = int(duration.total_seconds() // 3600)
    minutes = int((duration.total_seconds() % 3600) // 60)
    seconds = int(duration.total_seconds() % 60)
    text = (
        f"üî¥ *–£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {participation.activity.name}\n"
        f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {participation.activity.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"–ö–ª–∞—Å—Å: {participation.player_class.game_class.name} (–£—Ä–æ–≤–µ–Ω—å {participation.player_class.level})\n"
        f"–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è: {hours}—á {minutes}–º {seconds}—Å\n"
        f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: {participation.total_points}\n\n"
        f"üìä *–î–µ—Ç–∞–ª–∏ —É—á–∞—Å—Ç–∏—è:*\n"
        f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {participation.joined_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"‚Ä¢ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {participation.completed_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å\n"
        f"‚Ä¢ –ë–∞–ª–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ: {participation.points_earned}\n"
        f"‚Ä¢ –î–æ–ø. –±–∞–ª–ª—ã: {participation.additional_points}\n"
        f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã: {participation.total_points}"
        f"\n\nüî¥ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*"
    )
    all_player_classes = list(player.player_classes.select_related('game_class').all())
    used_class_ids = set(
        ActivityParticipant.objects.filter(activity=participation.activity, player=player)
        .values_list('player_class_id', flat=True)
    )
    available_player_classes = [pc for pc in all_player_classes if pc.id not in used_class_ids]
    keyboard = InlineKeyboardMarkup() if available_player_classes else None
    if available_player_classes:
        keyboard.add(InlineKeyboardButton("üü¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"join_activity_{participation.activity.id}"))
    msg = bot.send_message(
        chat_id=player.telegram_id,
        text=text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )
    player.add_completion_message(participation.activity.id, msg.message_id)

def send_full_participation_stats(player, activity, with_delete_button=True):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–º–∏ –∏–≥—Ä–æ–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ with_delete_button=True.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –±–∞–∑—ã!
    participations = ActivityParticipant.objects.filter(activity=activity, player=player)
    if not participations.exists():
        return
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–∏–π
    for part in participations:
        if part.completed_at:
            part.calculate_points()
    text = f"üî¥ *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*\n"
    text += f"*{activity.name}*\n"
    for part in participations:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
        part.refresh_from_db()
        duration = part.completed_at - part.joined_at if part.completed_at else timezone.now() - part.joined_at
        hours = int(duration.total_seconds() // 3600)
        minutes = int((duration.total_seconds() % 3600) // 60)
        seconds = int((duration.total_seconds() % 60))
        text += (
            f"–ö–ª–∞—Å—Å: {part.player_class.game_class.name} (–£—Ä–æ–≤–µ–Ω—å {part.player_class.level})\n"
            f"–í—Ä–µ–º—è —É—á–∞—Å—Ç–∏—è: {hours}—á {minutes}–º {seconds}—Å\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: {part.total_points}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {part.joined_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {part.completed_at.strftime('%d.%m.%Y %H:%M') if part.completed_at else '-'}\n"
            f"‚Ä¢ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å\n"
            f"‚Ä¢ –ë–∞–ª–ª—ã –∑–∞ —É—á–∞—Å—Ç–∏–µ: {part.points_earned}\n"
            f"‚Ä¢ –î–æ–ø. –±–∞–ª–ª—ã: {part.additional_points}\n"
            f"‚Ä¢ –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã: {part.total_points}\n"
        )
    text += "\nüî¥ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*"
    keyboard = InlineKeyboardMarkup() if with_delete_button else None
    if with_delete_button:
        keyboard.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"delete_statmsg_{activity.id}"))
    msg = bot.send_message(
        chat_id=player.telegram_id,
        text=text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )
    player.add_completion_message(activity.id, msg.message_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_statmsg_'))
def handle_delete_statmsg(call):
    user_id = call.from_user.id
    message_id = call.message.message_id
    try:
        bot.delete_message(chat_id=user_id, message_id=message_id)
        # –£–¥–∞–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ completion_message_ids
        from bot.models import Player
        player = Player.objects.get(telegram_id=str(user_id))
        # activity_id –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ callback_data
        activity_id = int(call.data.split('_')[-1])
        player.remove_completion_message(activity_id)
    except Exception as e:
        pass

# --- –î–û–ë–ê–í–ò–¢–¨ –í –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò ---
# –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ, –≥–¥–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ handle_activity_status_change)
# –ü–æ—Å–ª–µ participant.completed_at = timezone.now() –∏ participant.save() –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ send_participation_stats

